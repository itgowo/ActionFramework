package com.itgowo.actionframework.view;


import com.itgowo.actionframework.base.BaseConfig;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

public class ConfigWindow {
    private JPanel rootPanel;
    private JButton readButton;
    private JButton writeButton;
    private JPanel list;
    private JPanel rootList;
    private Map<String, String> stringMap = new HashMap<>();

    public ConfigWindow(String arg) {
        readButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                readPropertyListToView();
            }
        });
        readPropertyListToView();
        writeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (stringMap == null || stringMap.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "数据为空");
                    return;
                }
                savePropertis();
            }
        });
    }

    private void savePropertis() {
        if (stringMap == null) {
            return;
        }
        Properties properties = BaseConfig.getProperty(BaseConfig.getDefaultFile());
        for (Map.Entry<String, String> stringStringEntry : stringMap.entrySet()) {
            properties.setProperty(stringStringEntry.getKey(), stringStringEntry.getValue());
        }
        try {
            properties.store(new FileOutputStream(BaseConfig.getDefaultFile()), "Server Config");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void readPropertyListToView() {
        list.removeAll();
        GridLayout gridLayout = new GridLayout();
        gridLayout.setColumns(2);
        gridLayout.setRows(0);
        list.setLayout(gridLayout);
        Properties properties = BaseConfig.getProperty(BaseConfig.getDefaultFile());
        for (Map.Entry<Object, Object> objectObjectEntry : properties.entrySet()) {
            String key = (String) objectObjectEntry.getKey();
            String value = (String) objectObjectEntry.getValue();
            JLabel jLabel = new JLabel(key + ":");
            JTextField jTextField = new JTextField(value, 10);
            stringMap.put(key, value);
            jTextField.getDocument().addDocumentListener(new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    stringMap.put(key, jTextField.getText());
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    stringMap.put(key, jTextField.getText());
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    stringMap.put(key, jTextField.getText());
                }
            });
            list.add(jLabel);
            list.add(jTextField);
        }
        rootPanel.revalidate();
    }

    /**
     * 显示默认配置文件编辑器
     */
    public static void showConfigWindow() {
        JFrame frame = new JFrame("服务器默认配置工具 By 卢建超");
        frame.setContentPane(new ConfigWindow("").rootPanel);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        showConfigWindow();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        rootPanel.add(panel1, BorderLayout.NORTH);
        readButton = new JButton();
        readButton.setText("读配置");
        panel1.add(readButton);
        writeButton = new JButton();
        writeButton.setText("写配置");
        panel1.add(writeButton);
        rootList = new JPanel();
        rootList.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        rootPanel.add(rootList, BorderLayout.CENTER);
        rootList.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "配置信息"));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootList.add(scrollPane1);
        list = new JPanel();
        list.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        scrollPane1.setViewportView(list);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
